use crate::constants::RESP_BUFFER_SIZE;

pub fn convert_to_arr(v: &Vec<u8>) -> [u8; RESP_BUFFER_SIZE] {
    let mut arr = [0u8; RESP_BUFFER_SIZE];
    for (i, &item) in v.iter().enumerate().take(RESP_BUFFER_SIZE) {
        arr[i] = item;
    }
    arr
}

pub fn create_buffer() -> Vec<u8> {
    //    Corresponds to ASCII code
    //   *   5   \r  \n  $   5   \r  \n   h    e    l    l    o  \r  \n
    vec![
        42, 53, 13, 10, 36, 53, 13, 10, 104, 101, 108, 108, 11, 13, 10,
    ]
}

pub fn create_hello() -> Vec<u8> {
    vec![
        42, 53, 13, 10, // *5
        36, 53, 13, 10, // $5
        104, 101, 108, 108, 111, 13, 10, // hello
        36, 49, 13, 10, // $1
        51, 13, 10, // 3
        36, 52, 13, 10, // $4
        97, 117, 116, 104, 13, 10, // auth
        36, 52, 13, 10, // $4
        114, 111, 111, 116, 13, 10, // root
        36, 51, 13, 10, // $3
        97, 98, 99, 13, 10, // abc
    ]
}

pub fn create_set_info() -> Vec<u8> {
    vec![
        42, 52, 13, 10, // *4
        36, 54, 13, 10, // $6
        99, 108, 105, 101, 110, 116, 13, 10, // client
        36, 55, 13, 10, // $7
        115, 101, 116, 105, 110, 102, 111, 13, 10, // setinfo
        36, 56, 13, 10, // $8
        76, 73, 66, 45, 78, 65, 77, 69, 13, 10, // LIB-NAME
        36, 49, 57, 13, 10, // $19
        103, 111, 45, 114, 101, 100, 105, 115, 40, 44, 103, 111, 49, 46, 50, 50, 46, 55, 41, 13,
        10, // go-redis(,go1.22.7)
        42, 52, 13, 10, // *4
        36, 54, 13, 10, // $6
        99, 108, 105, 101, 110, 116, 13, 10, // client
        36, 55, 13, 10, // $7
        115, 101, 116, 105, 110, 102, 111, 13, 10, // setinfo
        36, 55, 13, 10, // $7
        76, 73, 66, 45, 86, 69, 82, 13, 10, // LIB-VER
        36, 53, 13, 10, // $5
        57, 46, 54, 46, 49, 13, 10, // 9.6.1
    ]
}

pub fn create_ping() -> Vec<u8> {
    vec![
        42, 49, 13, 10, // *1
        36, 52, 13, 10, // $4
        112, 105, 110, 103, 13, 10, // ping
    ]
}

pub fn create_lpush_and_sadd_cmds() -> Vec<u8> {
    vec![
        42, 53, 13, 10, // *5
        36, 53, 13, 10, // $5
        108, 112, 117, 115, 104, 13, 10, // lpush
        36, 52, 13, 10, // $4
        107, 101, 121, 49, 13, 10, // key1
        36, 53, 13, 10, // $5
        118, 97, 108, 117, 101, 13, 10, // value
        36, 49, 13, 10, // $1
        55, 13, 10, // 7
        36, 49, 13, 10, // $1
        56, 13, 10, // 8
        42, 51, 13, 10, // *3
        36, 52, 13, 10, // $4
        115, 97, 100, 100, 13, 10, // sadd
        36, 52, 13, 10, // $4
        107, 101, 121, 50, 13, 10, // key 2
        36, 54, 13, 10, // $6
        118, 97, 108, 117, 101, 51, 13, 10, // value3
        42, 53, 13, 10, // *5
        36, 53, 13, 10, // $5
        108, 112, 117, 115, 104, 13, 10, // lpush
        36, 52, 13, 10, // $4
        107, 101, 121, 51, 13, 10, // key 3
        36, 53, 13, 10, // $5
        118, 97, 108, 117, 101, 13, 10, // value
        36, 49, 13, 10, // $1
        55, 13, 10, // 7
        36, 49, 13, 10, // $1
        56, 13, 10, // 8
    ]
}

pub fn create_chunked_transmission() -> Vec<Vec<u8>> {
    vec![
        vec![
            42, 53, 13, 10, // *5
            36, 53, 13, 10, // $5
            108, 112, 117, // lpush
        ],
        vec![
            115, 104, 13, 10, // lpush
            36, 52, 13, 10, // $4
            107, 101, 121, 49, 13, 10, // key1
            36, 53, 13, 10, // $5
            118, 97, 108,
        ],
        vec![
            117, 101, 13, 10, // value
            36, 49, 13, 10, // $1
            55, 13, 10, // 7
            36, 49, 13, 10, // $1
            56, 13, 10, // 8
        ],
        vec![
            42, 51, 13, 10, // *3
            36, 52, 13, 10, // $4
            115, 97, 100, 100, 13, 10, // sadd
            36, 52, 13, 10, // $4
            107, 101, 121, 50, 13, 10, // key 2
            36, 54, 13, 10, // $6
            118, 97, 108, 117, 101, 51, 13, 10, // value3
            42, 53, 13, 10, // *5
            36, 53, 13, 10, // $5
            108, 112, 117, 115, 104, 13, 10, // lpush
        ],
        vec![
            36, 52, 13, 10, // $4
            107, 101, 121, 51, 13, 10, // key 3
            36, 53, 13, 10, // $5
            118, 97, 108, 117, 101, 13, 10, // value
            36, 49, 13, 10, // $1
            55, 13, 10, // 7
            36, 49, 13, 10, // $1
            56, 13, 10, // 8
        ],
    ]
}
